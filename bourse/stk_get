#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import pdb

import os
import ConfigParser
import json
import sys

import argparse

import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy import and_

import models
from models import meta
import dbhandler
import parsers


stocks_type = ["ucits", "tracker", "stock", "currency"]

confparser = ConfigParser.ConfigParser()
home = os.path.expanduser("~")
rc_file = ".franckdbrc"

confparser.read(os.path.join(home, rc_file))

try:
    ucits_list = json.loads(confparser.get("bourse", "ucits"))
    ucits_url = confparser.get("bourse", "ucits_url")
    ucits_perf = confparser.get("bourse", "ucits_perf")
except ConfigParser.NoOptionError:
    ucits_list = []
    ucits_url = None
    ucits_perf = None

try:
    tracker_list = json.loads(confparser.get("bourse", "tracker"))
    tracker_url = confparser.get("bourse", "tracker_url")
    tracker_perf = confparser.get("bourse", "tracker_perf")
except ConfigParser.NoOptionError:
    tracker_list = []
    tracker_url = None
    tracker_perf = None

try:
    stock_list = json.loads(confparser.get("bourse", "stock"))
    stock_url = confparser.get("bourse", "stock_url")
except ConfigParser.NoOptionError:
    stock_list = []
    stock_url = None


if __name__ == "__main__":
    
    def implementation_lack(site):
        msg = "the site from which you want to download ucits datas,\n\
        {}\n isn't yet implemented in this software".format(ucits_url)
        print(msg)
        sys.exit(2)

    def populate_stocks_list_from_namespace(namespace):
        stk_list = []

        def _test_already_in_stk_list(elem):
            if elem in stk_list:
                return True
        
        if "a" in namespace.stk_type or "all" in namespace.stk_type:
            return stocks_type
        
        for elem in namespace.stk_type:
            if not _test_already_in_stk_list(elem):
                if elem == "u" or elem == "ucits":
                    stk_list.append("ucits")
                elif elem == "t" or elem == "tracker":
                    stk_list.append("tracker")
                elif elem == "s" or elem == "stock":
                    stk_list.append("stock")
                elif elem == "c" or elem == "currency":
                    stk_list.append("currency")
                else:
                    raise ValueError(
                    "Please, update the function\
                    'populate_stocks_list_from_namespace' with{}".format(elem))
        return stk_list


    argparser = argparse.ArgumentParser(description="Usage=%prog")
    argparser.add_argument('stk_type', nargs='*', 
                        choices=['all', 'a',
                                'ucits', 'u', 
                                'tracker', 't',
                                'stock', 's'
                                'currency', 'c'],
                        help="choose what you want to get")
    
    if sys.argv[1:]:
        namespace = argparser.parse_args(sys.argv[1:])
        stocks_list = populate_stocks_list_from_namespace(namespace)
    else:
        stocks_list = stocks_type

    models.init()
    meta.Base.metadata.create_all(bind=meta.session.bind.engine)

    try:
        for elem in stocks_list:
            if elem == "ucits":
                if ucits_list and ucits_url:
                    ucits_handler = dbhandler.UcitsAdd(meta.session)
                    if "boursorama" in ucits_url:
                        for ucits in ucits_list:
                            ucits_parser = parsers.UcitsBoursorama(
                                            "{}{}".format(ucits_url, ucits),
                                            "{}{}".format(ucits_perf, ucits))
                            ucits_datas = ucits_parser.get_datas()
                        ucits_handler.add(ucits_datas)

                    else:
                        implementation_lack(ucits_url)
            elif elem == "tracker":
                tracker_handler = dbhandler.TrackerAdd(meta.session)

            elif elem == "stock":
                if stock_list and stock_url:
                    if "boursorama" in stock_url:
                        for stock in stock_list:
                            stock_datas = get_datas(
                                        "{}{}".format(stock_url, stock))

                    else:
                        implementation_lack(stock_url)
            
            elif elem == "currency":
                pass

            else:
                raise ValueError("Please, update the if-elif stocks_list with\
                                {}".format(elem))

    except KeyboardInterrupt:
        sys.exit(1)
    
